// <auto-generated />
using System;
using Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(PrayerTimesDbContext))]
    [Migration("20240907150302_initial_database")]
    partial class initial_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.DomainModel.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("City");
                });

            modelBuilder.Entity("Backend.DomainModel.PrayerTiming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Asr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dhuhr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fajr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("GregorianDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("HijriDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Imsak")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maghrib")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Midnight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sunrise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sunset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrayerTimings");
                });

            modelBuilder.Entity("Backend.DomainModel.City", b =>
                {
                    b.HasOne("Backend.DomainModel.PrayerTiming", null)
                        .WithOne("City")
                        .HasForeignKey("Backend.DomainModel.City", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.DomainModel.PrayerTiming", b =>
                {
                    b.Navigation("City")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
